name: HA Compatibility Check

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue-Nummer zum Testen ohne #'
        required: true
        type: number

permissions:
  contents: read
  issues: write

jobs:
  compatibility-test:
    # Nur für HA-Release-Issues ausführen
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'home-assistant')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v5
        
      - name: Issue-Informationen abrufen
        id: issue-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          
          # Hole Issue-Details via GitHub API
          ISSUE_DATA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}")
          
          # Extrahiere HA-Version aus Titel (z.B. "New Home Assistant Release: 2025.8.1")
          HA_VERSION=$(echo "$ISSUE_DATA" | jq -r '.title | split(": ")[1] // empty')
          
          if [ -z "$HA_VERSION" ]; then
            echo "❌ Keine HA-Version im Issue-Titel gefunden"
            exit 1
          fi
          
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
          echo "ha_version=${HA_VERSION}" >> $GITHUB_OUTPUT
          echo "✅ Erkannte HA-Version: ${HA_VERSION}"

      - name: Python einrichten
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.2'

      - name: Dependencies und HA-Version installieren
        run: |
          python -m pip install --upgrade pip
          
          # Installiere Test-Requirements
          if [ -f requirements_test.txt ]; then
            echo "Installiere Test-Dependencies aus requirements_test.txt"
            pip install -r requirements_test.txt
          else
            echo "requirements_test.txt nicht gefunden, installiere pytest direkt"
            pip install pytest pytest-asyncio pytest-mock
          fi
          
          # Installiere spezifische HA-Version (überschreibt die Version aus requirements)
          echo "Installiere Home Assistant ${{ steps.issue-info.outputs.ha_version }}"
          pip install "homeassistant==${{ steps.issue-info.outputs.ha_version }}" --force-reinstall

      - name: Kompatibilitätstests ausführen
        id: tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "Führe Kompatibilitätstests mit HA ${{ steps.issue-info.outputs.ha_version }} aus"
          
          # Python Path setzen für custom_components Import
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          echo "PYTHONPATH: $PYTHONPATH"
          
          # Basis-Tests durchführen  
          set +e
          python -m pytest -v --tb=short -k "not slow" --disable-warnings --strict-markers
          TEST_RESULT=$?
          set -e
          
          if [ $TEST_RESULT -eq 0 ]; then
            echo "test_status=✅ success" >> $GITHUB_OUTPUT
            echo "test_summary=Alle Tests erfolgreich" >> $GITHUB_OUTPUT
          elif [ $TEST_RESULT -eq 5 ]; then
            # Keine Tests gefunden
            echo "test_status=⚠️ no-tests" >> $GITHUB_OUTPUT
            echo "test_summary=Keine Tests gefunden" >> $GITHUB_OUTPUT
          else
            echo "test_status=❌ failed" >> $GITHUB_OUTPUT
            echo "test_summary=Tests fehlgeschlagen" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Issue mit Testergebnissen aktualisieren
        if: always()
        env:
          ISSUE_NUMBER: ${{ steps.issue-info.outputs.issue_number }}
          HA_VERSION: ${{ steps.issue-info.outputs.ha_version }}
          TEST_STATUS: ${{ steps.tests.outputs.test_status }}
          TEST_SUMMARY: ${{ steps.tests.outputs.test_summary }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Mehrzeiligen Kommentar-Body per Here-Doc erzeugen (echte Zeilenumbrüche)
          COMMENT_BODY=$(cat <<EOF
          ## Automatischer Kompatibilitätstest

          **Home Assistant Version:** ${HA_VERSION}
          **Test-Ergebnis:** ${TEST_STATUS}
          **Zusammenfassung:** ${TEST_SUMMARY}
          **Workflow:** [Siehe Details](${WORKFLOW_URL})

          ---
          *Automatisch ausgeführt durch GitHub Actions*
          EOF
          )

          # Kommentar posten (JSON sauber mit jq bauen)
          curl -sS -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" \
            -d "$(jq -n --arg body "$COMMENT_BODY" '{body:$body}')"

          # Bei Erfolg: Checkbox im Issue abhaken
          if [ "$TEST_STATUS" = "✅ success" ] || [ "$TEST_STATUS" = "⚠️ no-tests" ]; then
            echo "✅ Aktualisiere Issue-Checkboxes"
            ISSUE_BODY=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}" | jq -r '.body')

            UPDATED_BODY=$(echo "$ISSUE_BODY" | sed 's/- \[ \] Mit neuer Home Assistant Version testen/- [x] Mit neuer Home Assistant Version testen/')

            curl -sS -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}" \
              -d "$(jq -n --arg body "$UPDATED_BODY" '{body:$body}')"
          fi