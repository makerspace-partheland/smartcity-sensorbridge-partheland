name: Post-Merge HA Compatibility Test

on:
  push:
    branches: [main]
    paths:
      - 'requirements_test.txt'
      - 'requirements.txt'
      - 'custom_components/sensorbridge_partheland/manifest.json'

permissions:
  contents: read
  issues: write

jobs:
  ha-compatibility-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v5
        with:
          fetch-depth: 2  # F√ºr git diff ben√∂tigt

      - name: Pr√ºfe ob HA-Version ge√§ndert wurde
        id: check-ha-change
        run: |
          # Pr√ºfe ob Home Assistant in requirements_test.txt ge√§ndert wurde
          if git diff HEAD~1 HEAD -- requirements_test.txt | grep -q "^+.*homeassistant"; then
            # Extrahiere neue HA-Version
            HA_VERSION=$(grep "^homeassistant" requirements_test.txt | sed 's/.*>= *//')
            echo "ha_changed=true" >> $GITHUB_OUTPUT
            echo "ha_version=$HA_VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Home Assistant wurde auf Version $HA_VERSION aktualisiert"
          else
            echo "ha_changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Keine Home Assistant Version-√Ñnderung erkannt"
          fi

      - name: Python einrichten
        if: steps.check-ha-change.outputs.ha_changed == 'true'
        uses: actions/setup-python@v6
        with:
          python-version: '3.13.2'

      - name: Dependencies installieren
        if: steps.check-ha-change.outputs.ha_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          
          # Installiere Test-Requirements
          pip install -r requirements_test.txt
          
          # Installiere spezifische HA-Version f√ºr Test
          echo "Installiere Home Assistant ${{ steps.check-ha-change.outputs.ha_version }} f√ºr Kompatibilit√§tstest"
          pip install "homeassistant==${{ steps.check-ha-change.outputs.ha_version }}" --force-reinstall

      - name: Kompatibilit√§tstests ausf√ºhren
        if: steps.check-ha-change.outputs.ha_changed == 'true'
        id: tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          echo "F√ºhre Kompatibilit√§tstests mit HA ${{ steps.check-ha-change.outputs.ha_version }} aus"
          
          # Python Path setzen f√ºr custom_components Import
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH}"
          echo "PYTHONPATH: $PYTHONPATH"
          
          # Basis-Tests durchf√ºhren  
          set +e
          python -m pytest -v --tb=short -k "not slow" --disable-warnings --strict-markers
          TEST_RESULT=$?
          set -e
          
          if [ $TEST_RESULT -eq 0 ]; then
            echo "test_status=‚úÖ success" >> $GITHUB_OUTPUT
            echo "test_summary=Alle Tests erfolgreich mit HA ${{ steps.check-ha-change.outputs.ha_version }}" >> $GITHUB_OUTPUT
          elif [ $TEST_RESULT -eq 5 ]; then
            # Keine Tests gefunden
            echo "test_status=‚ö†Ô∏è no-tests" >> $GITHUB_OUTPUT
            echo "test_summary=Keine Tests gefunden" >> $GITHUB_OUTPUT
          else
            echo "test_status=‚ùå failed" >> $GITHUB_OUTPUT
            echo "test_summary=Tests fehlgeschlagen mit HA ${{ steps.check-ha-change.outputs.ha_version }}" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Issue f√ºr HA-Update erstellen (bei Fehlern)
        if: steps.check-ha-change.outputs.ha_changed == 'true' && steps.tests.outputs.test_status == '‚ùå failed'
        env:
          HA_VERSION: ${{ steps.check-ha-change.outputs.ha_version }}
          TEST_SUMMARY: ${{ steps.tests.outputs.test_summary }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Erstelle Issue f√ºr fehlgeschlagene HA-Kompatibilit√§tstests
          ISSUE_BODY=$(cat <<EOF
          ## üö® Home Assistant Kompatibilit√§tsproblem

          **Home Assistant Version:** ${HA_VERSION}
          **Test-Ergebnis:** ${TEST_SUMMARY}
          **Workflow:** [Siehe Details](${WORKFLOW_URL})

          ### N√§chste Schritte:
          - [ ] Problem analysieren
          - [ ] Code anpassen f√ºr HA ${HA_VERSION}
          - [ ] Tests erneut ausf√ºhren
          - [ ] Mit neuer Home Assistant Version testen

          ---
          *Automatisch erstellt durch GitHub Actions nach Dependency-Update*
          EOF
          )

          # Issue erstellen
          curl -sS -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d "$(jq -n --arg title "HA ${HA_VERSION} Kompatibilit√§tsproblem" --arg body "$ISSUE_BODY" '{title:$title, body:$body, labels:["bug", "home-assistant", "compatibility"]})"

      - name: Erfolgreichen Test dokumentieren
        if: steps.check-ha-change.outputs.ha_changed == 'true' && (steps.tests.outputs.test_status == '‚úÖ success' || steps.tests.outputs.test_status == '‚ö†Ô∏è no-tests')
        run: |
          echo "‚úÖ Home Assistant ${{ steps.check-ha-change.outputs.ha_version }} Kompatibilit√§tstest erfolgreich"
          echo "üìù Alle Tests bestanden - keine weiteren Aktionen erforderlich"
